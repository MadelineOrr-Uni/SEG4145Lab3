
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005054  08005054  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800505c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000014  08005070  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08005070  00007548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109f  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002562  00000000  00000000  000180e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  0001b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c3b  00000000  00000000  0001c2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e29  00000000  00000000  0003ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3691  00000000  00000000  00053d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001273e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  0012742c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042ac 	.word	0x080042ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080042ac 	.word	0x080042ac

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	int done=1;
 800050a:	2301      	movs	r3, #1
 800050c:	607b      	str	r3, [r7, #4]
	while(done)
 800050e:	e19b      	b.n	8000848 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000516:	48b3      	ldr	r0, [pc, #716]	@ (80007e4 <Get_Key+0x2e0>)
 8000518:	f001 fbd4 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800051c:	2200      	movs	r2, #0
 800051e:	2110      	movs	r1, #16
 8000520:	48b0      	ldr	r0, [pc, #704]	@ (80007e4 <Get_Key+0x2e0>)
 8000522:	f001 fbcf 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	48ae      	ldr	r0, [pc, #696]	@ (80007e4 <Get_Key+0x2e0>)
 800052c:	f001 fbca 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000530:	2200      	movs	r2, #0
 8000532:	2108      	movs	r1, #8
 8000534:	48ab      	ldr	r0, [pc, #684]	@ (80007e4 <Get_Key+0x2e0>)
 8000536:	f001 fbc5 	bl	8001cc4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	48a9      	ldr	r0, [pc, #676]	@ (80007e4 <Get_Key+0x2e0>)
 800053e:	f001 fba9 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00b      	beq.n	8000560 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000548:	bf00      	nop
 800054a:	2140      	movs	r1, #64	@ 0x40
 800054c:	48a5      	ldr	r0, [pc, #660]	@ (80007e4 <Get_Key+0x2e0>)
 800054e:	f001 fba1 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f8      	bne.n	800054a <Get_Key+0x46>
		key='1';
 8000558:	4ba3      	ldr	r3, [pc, #652]	@ (80007e8 <Get_Key+0x2e4>)
 800055a:	2231      	movs	r2, #49	@ 0x31
 800055c:	701a      	strb	r2, [r3, #0]
		break;
 800055e:	e177      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	48a2      	ldr	r0, [pc, #648]	@ (80007ec <Get_Key+0x2e8>)
 8000564:	f001 fb96 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00b      	beq.n	8000586 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800056e:	bf00      	nop
 8000570:	2180      	movs	r1, #128	@ 0x80
 8000572:	489e      	ldr	r0, [pc, #632]	@ (80007ec <Get_Key+0x2e8>)
 8000574:	f001 fb8e 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f8      	bne.n	8000570 <Get_Key+0x6c>
		key='4';
 800057e:	4b9a      	ldr	r3, [pc, #616]	@ (80007e8 <Get_Key+0x2e4>)
 8000580:	2234      	movs	r2, #52	@ 0x34
 8000582:	701a      	strb	r2, [r3, #0]
		break;
 8000584:	e164      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000586:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800058a:	4899      	ldr	r0, [pc, #612]	@ (80007f0 <Get_Key+0x2ec>)
 800058c:	f001 fb82 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00c      	beq.n	80005b0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000596:	bf00      	nop
 8000598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059c:	4894      	ldr	r0, [pc, #592]	@ (80007f0 <Get_Key+0x2ec>)
 800059e:	f001 fb79 	bl	8001c94 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f7      	bne.n	8000598 <Get_Key+0x94>
		key='7';
 80005a8:	4b8f      	ldr	r3, [pc, #572]	@ (80007e8 <Get_Key+0x2e4>)
 80005aa:	2237      	movs	r2, #55	@ 0x37
 80005ac:	701a      	strb	r2, [r3, #0]
		break;
 80005ae:	e14f      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b4:	488e      	ldr	r0, [pc, #568]	@ (80007f0 <Get_Key+0x2ec>)
 80005b6:	f001 fb6d 	bl	8001c94 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00c      	beq.n	80005da <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005c0:	bf00      	nop
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	488a      	ldr	r0, [pc, #552]	@ (80007f0 <Get_Key+0x2ec>)
 80005c8:	f001 fb64 	bl	8001c94 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f7      	bne.n	80005c2 <Get_Key+0xbe>
		key='*';
 80005d2:	4b85      	ldr	r3, [pc, #532]	@ (80007e8 <Get_Key+0x2e4>)
 80005d4:	222a      	movs	r2, #42	@ 0x2a
 80005d6:	701a      	strb	r2, [r3, #0]
		break;
 80005d8:	e13a      	b.n	8000850 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e0:	4880      	ldr	r0, [pc, #512]	@ (80007e4 <Get_Key+0x2e0>)
 80005e2:	f001 fb6f 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	487e      	ldr	r0, [pc, #504]	@ (80007e4 <Get_Key+0x2e0>)
 80005ec:	f001 fb6a 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	487b      	ldr	r0, [pc, #492]	@ (80007e4 <Get_Key+0x2e0>)
 80005f6:	f001 fb65 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	4879      	ldr	r0, [pc, #484]	@ (80007e4 <Get_Key+0x2e0>)
 8000600:	f001 fb60 	bl	8001cc4 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	4877      	ldr	r0, [pc, #476]	@ (80007e4 <Get_Key+0x2e0>)
 8000608:	f001 fb44 	bl	8001c94 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00b      	beq.n	800062a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000612:	bf00      	nop
 8000614:	2140      	movs	r1, #64	@ 0x40
 8000616:	4873      	ldr	r0, [pc, #460]	@ (80007e4 <Get_Key+0x2e0>)
 8000618:	f001 fb3c 	bl	8001c94 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1f8      	bne.n	8000614 <Get_Key+0x110>
		key='2';
 8000622:	4b71      	ldr	r3, [pc, #452]	@ (80007e8 <Get_Key+0x2e4>)
 8000624:	2232      	movs	r2, #50	@ 0x32
 8000626:	701a      	strb	r2, [r3, #0]
		break;
 8000628:	e112      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	486f      	ldr	r0, [pc, #444]	@ (80007ec <Get_Key+0x2e8>)
 800062e:	f001 fb31 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000638:	bf00      	nop
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	486b      	ldr	r0, [pc, #428]	@ (80007ec <Get_Key+0x2e8>)
 800063e:	f001 fb29 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f8      	bne.n	800063a <Get_Key+0x136>
		key='5';
 8000648:	4b67      	ldr	r3, [pc, #412]	@ (80007e8 <Get_Key+0x2e4>)
 800064a:	2235      	movs	r2, #53	@ 0x35
 800064c:	701a      	strb	r2, [r3, #0]
		break;
 800064e:	e0ff      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000650:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000654:	4866      	ldr	r0, [pc, #408]	@ (80007f0 <Get_Key+0x2ec>)
 8000656:	f001 fb1d 	bl	8001c94 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00c      	beq.n	800067a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000660:	bf00      	nop
 8000662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000666:	4862      	ldr	r0, [pc, #392]	@ (80007f0 <Get_Key+0x2ec>)
 8000668:	f001 fb14 	bl	8001c94 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f7      	bne.n	8000662 <Get_Key+0x15e>
		key='8';
 8000672:	4b5d      	ldr	r3, [pc, #372]	@ (80007e8 <Get_Key+0x2e4>)
 8000674:	2238      	movs	r2, #56	@ 0x38
 8000676:	701a      	strb	r2, [r3, #0]
		break;
 8000678:	e0ea      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	485c      	ldr	r0, [pc, #368]	@ (80007f0 <Get_Key+0x2ec>)
 8000680:	f001 fb08 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00c      	beq.n	80006a4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800068a:	bf00      	nop
 800068c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000690:	4857      	ldr	r0, [pc, #348]	@ (80007f0 <Get_Key+0x2ec>)
 8000692:	f001 faff 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f7      	bne.n	800068c <Get_Key+0x188>
		key='0';
 800069c:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <Get_Key+0x2e4>)
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	701a      	strb	r2, [r3, #0]
		break;
 80006a2:	e0d5      	b.n	8000850 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006aa:	484e      	ldr	r0, [pc, #312]	@ (80007e4 <Get_Key+0x2e0>)
 80006ac:	f001 fb0a 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006b0:	2200      	movs	r2, #0
 80006b2:	2110      	movs	r1, #16
 80006b4:	484b      	ldr	r0, [pc, #300]	@ (80007e4 <Get_Key+0x2e0>)
 80006b6:	f001 fb05 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	4849      	ldr	r0, [pc, #292]	@ (80007e4 <Get_Key+0x2e0>)
 80006c0:	f001 fb00 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	4846      	ldr	r0, [pc, #280]	@ (80007e4 <Get_Key+0x2e0>)
 80006ca:	f001 fafb 	bl	8001cc4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4844      	ldr	r0, [pc, #272]	@ (80007e4 <Get_Key+0x2e0>)
 80006d2:	f001 fadf 	bl	8001c94 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00b      	beq.n	80006f4 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006dc:	bf00      	nop
 80006de:	2140      	movs	r1, #64	@ 0x40
 80006e0:	4840      	ldr	r0, [pc, #256]	@ (80007e4 <Get_Key+0x2e0>)
 80006e2:	f001 fad7 	bl	8001c94 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f8      	bne.n	80006de <Get_Key+0x1da>
		key='3';
 80006ec:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <Get_Key+0x2e4>)
 80006ee:	2233      	movs	r2, #51	@ 0x33
 80006f0:	701a      	strb	r2, [r3, #0]
		break;
 80006f2:	e0ad      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	483d      	ldr	r0, [pc, #244]	@ (80007ec <Get_Key+0x2e8>)
 80006f8:	f001 facc 	bl	8001c94 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000702:	bf00      	nop
 8000704:	2180      	movs	r1, #128	@ 0x80
 8000706:	4839      	ldr	r0, [pc, #228]	@ (80007ec <Get_Key+0x2e8>)
 8000708:	f001 fac4 	bl	8001c94 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f8      	bne.n	8000704 <Get_Key+0x200>
		key='6';
 8000712:	4b35      	ldr	r3, [pc, #212]	@ (80007e8 <Get_Key+0x2e4>)
 8000714:	2236      	movs	r2, #54	@ 0x36
 8000716:	701a      	strb	r2, [r3, #0]
		break;
 8000718:	e09a      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800071a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071e:	4834      	ldr	r0, [pc, #208]	@ (80007f0 <Get_Key+0x2ec>)
 8000720:	f001 fab8 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00c      	beq.n	8000744 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800072a:	bf00      	nop
 800072c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000730:	482f      	ldr	r0, [pc, #188]	@ (80007f0 <Get_Key+0x2ec>)
 8000732:	f001 faaf 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f7      	bne.n	800072c <Get_Key+0x228>
		key='9';
 800073c:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <Get_Key+0x2e4>)
 800073e:	2239      	movs	r2, #57	@ 0x39
 8000740:	701a      	strb	r2, [r3, #0]
		break;
 8000742:	e085      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <Get_Key+0x2ec>)
 800074a:	f001 faa3 	bl	8001c94 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00c      	beq.n	800076e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000754:	bf00      	nop
 8000756:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075a:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <Get_Key+0x2ec>)
 800075c:	f001 fa9a 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f7      	bne.n	8000756 <Get_Key+0x252>
		key='#';
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <Get_Key+0x2e4>)
 8000768:	2223      	movs	r2, #35	@ 0x23
 800076a:	701a      	strb	r2, [r3, #0]
		break;
 800076c:	e070      	b.n	8000850 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000774:	481b      	ldr	r0, [pc, #108]	@ (80007e4 <Get_Key+0x2e0>)
 8000776:	f001 faa5 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	4819      	ldr	r0, [pc, #100]	@ (80007e4 <Get_Key+0x2e0>)
 8000780:	f001 faa0 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <Get_Key+0x2e0>)
 800078a:	f001 fa9b 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800078e:	2201      	movs	r2, #1
 8000790:	2108      	movs	r1, #8
 8000792:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <Get_Key+0x2e0>)
 8000794:	f001 fa96 	bl	8001cc4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <Get_Key+0x2e0>)
 800079c:	f001 fa7a 	bl	8001c94 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00b      	beq.n	80007be <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007a6:	bf00      	nop
 80007a8:	2140      	movs	r1, #64	@ 0x40
 80007aa:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <Get_Key+0x2e0>)
 80007ac:	f001 fa72 	bl	8001c94 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f8      	bne.n	80007a8 <Get_Key+0x2a4>
		key='A';
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <Get_Key+0x2e4>)
 80007b8:	2241      	movs	r2, #65	@ 0x41
 80007ba:	701a      	strb	r2, [r3, #0]
		break;
 80007bc:	e048      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	480a      	ldr	r0, [pc, #40]	@ (80007ec <Get_Key+0x2e8>)
 80007c2:	f001 fa67 	bl	8001c94 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d013      	beq.n	80007f4 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007cc:	bf00      	nop
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	4806      	ldr	r0, [pc, #24]	@ (80007ec <Get_Key+0x2e8>)
 80007d2:	f001 fa5f 	bl	8001c94 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f8      	bne.n	80007ce <Get_Key+0x2ca>
		key='B';
 80007dc:	4b02      	ldr	r3, [pc, #8]	@ (80007e8 <Get_Key+0x2e4>)
 80007de:	2242      	movs	r2, #66	@ 0x42
 80007e0:	701a      	strb	r2, [r3, #0]
		break;
 80007e2:	e035      	b.n	8000850 <Get_Key+0x34c>
 80007e4:	40020400 	.word	0x40020400
 80007e8:	20000030 	.word	0x20000030
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007f8:	481a      	ldr	r0, [pc, #104]	@ (8000864 <Get_Key+0x360>)
 80007fa:	f001 fa4b 	bl	8001c94 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00c      	beq.n	800081e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000804:	bf00      	nop
 8000806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800080a:	4816      	ldr	r0, [pc, #88]	@ (8000864 <Get_Key+0x360>)
 800080c:	f001 fa42 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f7      	bne.n	8000806 <Get_Key+0x302>
		key='C';
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <Get_Key+0x364>)
 8000818:	2243      	movs	r2, #67	@ 0x43
 800081a:	701a      	strb	r2, [r3, #0]
		break;
 800081c:	e018      	b.n	8000850 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <Get_Key+0x360>)
 8000824:	f001 fa36 	bl	8001c94 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00c      	beq.n	8000848 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800082e:	bf00      	nop
 8000830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <Get_Key+0x360>)
 8000836:	f001 fa2d 	bl	8001c94 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f7      	bne.n	8000830 <Get_Key+0x32c>
		key='D';
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <Get_Key+0x364>)
 8000842:	2244      	movs	r2, #68	@ 0x44
 8000844:	701a      	strb	r2, [r3, #0]
		break;
 8000846:	e003      	b.n	8000850 <Get_Key+0x34c>
	while(done)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f47f ae60 	bne.w	8000510 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000850:	2120      	movs	r1, #32
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <Get_Key+0x360>)
 8000854:	f001 fa4f 	bl	8001cf6 <HAL_GPIO_TogglePin>
	return(key);
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <Get_Key+0x364>)
 800085a:	781b      	ldrb	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020000 	.word	0x40020000
 8000868:	20000030 	.word	0x20000030

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 ff33 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f947 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 fa0b 	bl	8000c94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087e:	f000 f9df 	bl	8000c40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000882:	f000 f9af 	bl	8000be4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000886:	f000 fab9 	bl	8000dfc <SSD1306_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    len1 = 0;
 800088a:	4b93      	ldr	r3, [pc, #588]	@ (8000ad8 <main+0x26c>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
    len2 = 0;
 8000890:	4b92      	ldr	r3, [pc, #584]	@ (8000adc <main+0x270>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
    armed = 0;
 8000896:	4b92      	ldr	r3, [pc, #584]	@ (8000ae0 <main+0x274>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]

  while (1)
  {


	  if (armed == 0) {
 800089c:	4b90      	ldr	r3, [pc, #576]	@ (8000ae0 <main+0x274>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d159      	bne.n	8000958 <main+0xec>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	488e      	ldr	r0, [pc, #568]	@ (8000ae4 <main+0x278>)
 80008aa:	f001 fa0b 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	488c      	ldr	r0, [pc, #560]	@ (8000ae4 <main+0x278>)
 80008b4:	f001 fa06 	bl	8001cc4 <HAL_GPIO_WritePin>


		  SSD1306_GotoXY (0,0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fc08 	bl	80010d0 <SSD1306_GotoXY>
		  SSD1306_Puts ("NOT ARMED:", &Font_11x18, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	4989      	ldr	r1, [pc, #548]	@ (8000ae8 <main+0x27c>)
 80008c4:	4889      	ldr	r0, [pc, #548]	@ (8000aec <main+0x280>)
 80008c6:	f000 fc97 	bl	80011f8 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80008ca:	f000 fb5b 	bl	8000f84 <SSD1306_UpdateScreen>

		  /* USER CODE BEGIN 3 */
		  key = Get_Key();
 80008ce:	f7ff fe19 	bl	8000504 <Get_Key>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b86      	ldr	r3, [pc, #536]	@ (8000af0 <main+0x284>)
 80008d8:	701a      	strb	r2, [r3, #0]

		  if (key == '*') {
 80008da:	4b85      	ldr	r3, [pc, #532]	@ (8000af0 <main+0x284>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b2a      	cmp	r3, #42	@ 0x2a
 80008e0:	d10f      	bne.n	8000902 <main+0x96>
			  if (len1 >= 4 && len1 <= 6) {
 80008e2:	4b7d      	ldr	r3, [pc, #500]	@ (8000ad8 <main+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	f340 80f4 	ble.w	8000ad4 <main+0x268>
 80008ec:	4b7a      	ldr	r3, [pc, #488]	@ (8000ad8 <main+0x26c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b06      	cmp	r3, #6
 80008f2:	f300 80ef 	bgt.w	8000ad4 <main+0x268>
				  armed = 1;
 80008f6:	4b7a      	ldr	r3, [pc, #488]	@ (8000ae0 <main+0x274>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
				  SSD1306_Clear();
 80008fc:	f000 fca1 	bl	8001242 <SSD1306_Clear>
				  continue;
 8000900:	e0e9      	b.n	8000ad6 <main+0x26a>
			  } else {
				  continue;
			  }
		  } else if (len1 < 6) {
 8000902:	4b75      	ldr	r3, [pc, #468]	@ (8000ad8 <main+0x26c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b05      	cmp	r3, #5
 8000908:	dc0a      	bgt.n	8000920 <main+0xb4>
			  hold1[len1] = key;
 800090a:	4b73      	ldr	r3, [pc, #460]	@ (8000ad8 <main+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a78      	ldr	r2, [pc, #480]	@ (8000af0 <main+0x284>)
 8000910:	7811      	ldrb	r1, [r2, #0]
 8000912:	4a78      	ldr	r2, [pc, #480]	@ (8000af4 <main+0x288>)
 8000914:	54d1      	strb	r1, [r2, r3]
			  len1++;
 8000916:	4b70      	ldr	r3, [pc, #448]	@ (8000ad8 <main+0x26c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ad8 <main+0x26c>)
 800091e:	6013      	str	r3, [r2, #0]
		  }


		  HAL_UART_Transmit(&huart2, (uint8_t *)hold1, strlen(hold1), 100);
 8000920:	4874      	ldr	r0, [pc, #464]	@ (8000af4 <main+0x288>)
 8000922:	f7ff fc6f 	bl	8000204 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	2364      	movs	r3, #100	@ 0x64
 800092c:	4971      	ldr	r1, [pc, #452]	@ (8000af4 <main+0x288>)
 800092e:	4872      	ldr	r0, [pc, #456]	@ (8000af8 <main+0x28c>)
 8000930:	f003 f8d4 	bl	8003adc <HAL_UART_Transmit>
		  SSD1306_GotoXY (0, 30);
 8000934:	211e      	movs	r1, #30
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fbca 	bl	80010d0 <SSD1306_GotoXY>
		  SSD1306_UpdateScreen();
 800093c:	f000 fb22 	bl	8000f84 <SSD1306_UpdateScreen>
		  SSD1306_Puts (hold1, &Font_11x18, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	4969      	ldr	r1, [pc, #420]	@ (8000ae8 <main+0x27c>)
 8000944:	486b      	ldr	r0, [pc, #428]	@ (8000af4 <main+0x288>)
 8000946:	f000 fc57 	bl	80011f8 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800094a:	f000 fb1b 	bl	8000f84 <SSD1306_UpdateScreen>
		  HAL_Delay (500);
 800094e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000952:	f000 ff05 	bl	8001760 <HAL_Delay>
 8000956:	e7a1      	b.n	800089c <main+0x30>

	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2120      	movs	r1, #32
 800095c:	4861      	ldr	r0, [pc, #388]	@ (8000ae4 <main+0x278>)
 800095e:	f001 f9b1 	bl	8001cc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	485f      	ldr	r0, [pc, #380]	@ (8000ae4 <main+0x278>)
 8000968:	f001 f9ac 	bl	8001cc4 <HAL_GPIO_WritePin>

		  SSD1306_GotoXY (0,0);
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fbae 	bl	80010d0 <SSD1306_GotoXY>
		  SSD1306_Puts ("ARMED:", &Font_11x18, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	495c      	ldr	r1, [pc, #368]	@ (8000ae8 <main+0x27c>)
 8000978:	4860      	ldr	r0, [pc, #384]	@ (8000afc <main+0x290>)
 800097a:	f000 fc3d 	bl	80011f8 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800097e:	f000 fb01 	bl	8000f84 <SSD1306_UpdateScreen>

		  /* USER CODE BEGIN 3 */
			  key = Get_Key();
 8000982:	f7ff fdbf 	bl	8000504 <Get_Key>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b59      	ldr	r3, [pc, #356]	@ (8000af0 <main+0x284>)
 800098c:	701a      	strb	r2, [r3, #0]
			  if (key == '*') {
 800098e:	4b58      	ldr	r3, [pc, #352]	@ (8000af0 <main+0x284>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b2a      	cmp	r3, #42	@ 0x2a
 8000994:	d16e      	bne.n	8000a74 <main+0x208>
				  int match = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
				  if (len1 != len2) {
 800099a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <main+0x26c>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b4f      	ldr	r3, [pc, #316]	@ (8000adc <main+0x270>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d002      	beq.n	80009ac <main+0x140>
					 match = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e016      	b.n	80009da <main+0x16e>
				  } else {
					  for (int i=0;i<len1;i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	e00e      	b.n	80009d0 <main+0x164>
						  if (hold1[i] != hold2[i]) {
 80009b2:	4a50      	ldr	r2, [pc, #320]	@ (8000af4 <main+0x288>)
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4413      	add	r3, r2
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4951      	ldr	r1, [pc, #324]	@ (8000b00 <main+0x294>)
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	440b      	add	r3, r1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d001      	beq.n	80009ca <main+0x15e>
							  match = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
					  for (int i=0;i<len1;i++) {
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	3301      	adds	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <main+0x26c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbeb      	blt.n	80009b2 <main+0x146>
						  }
					  }
				  }

				  SSD1306_Clear();
 80009da:	f000 fc32 	bl	8001242 <SSD1306_Clear>
				  if (match == 1) {
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d12e      	bne.n	8000a42 <main+0x1d6>
					  armed = 0;
 80009e4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <main+0x274>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
					  //CLEAR TRUE PASSW)RD
					  for (int i=0;i<len1;i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	e007      	b.n	8000a00 <main+0x194>
						  hold1[i] = ' ';
 80009f0:	4a40      	ldr	r2, [pc, #256]	@ (8000af4 <main+0x288>)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	2220      	movs	r2, #32
 80009f8:	701a      	strb	r2, [r3, #0]
					  for (int i=0;i<len1;i++) {
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <main+0x26c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbf2      	blt.n	80009f0 <main+0x184>
					  }
					  len1 = 0;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <main+0x26c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
					  //CLEAR TEMP PASS
					  for (int i=0;i<len1;i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	e00c      	b.n	8000a30 <main+0x1c4>
						  hold2[i] = ' ';
 8000a16:	4a3a      	ldr	r2, [pc, #232]	@ (8000b00 <main+0x294>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	701a      	strb	r2, [r3, #0]
						  hold3[i] = ' ';
 8000a20:	4a38      	ldr	r2, [pc, #224]	@ (8000b04 <main+0x298>)
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	2220      	movs	r2, #32
 8000a28:	701a      	strb	r2, [r3, #0]
					  for (int i=0;i<len1;i++) {
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <main+0x26c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbed      	blt.n	8000a16 <main+0x1aa>
					  }
					  len2 = 0;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <main+0x270>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
					  continue;
 8000a40:	e049      	b.n	8000ad6 <main+0x26a>
				  } else {
					  //CLEAR TEMP PASS
					  for (int i=0;i<len1;i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	e00c      	b.n	8000a62 <main+0x1f6>
						  hold2[i] = ' ';
 8000a48:	4a2d      	ldr	r2, [pc, #180]	@ (8000b00 <main+0x294>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	2220      	movs	r2, #32
 8000a50:	701a      	strb	r2, [r3, #0]
						  hold3[i] = ' ';
 8000a52:	4a2c      	ldr	r2, [pc, #176]	@ (8000b04 <main+0x298>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	2220      	movs	r2, #32
 8000a5a:	701a      	strb	r2, [r3, #0]
					  for (int i=0;i<len1;i++) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <main+0x26c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbed      	blt.n	8000a48 <main+0x1dc>
					  }
					  len2 = 0;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <main+0x270>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
					  continue;
 8000a72:	e030      	b.n	8000ad6 <main+0x26a>
				  }
			  } else if (len2 < 6) {
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <main+0x270>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	dc0f      	bgt.n	8000a9c <main+0x230>
				  hold2[len2] = key;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <main+0x270>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <main+0x284>)
 8000a82:	7811      	ldrb	r1, [r2, #0]
 8000a84:	4a1e      	ldr	r2, [pc, #120]	@ (8000b00 <main+0x294>)
 8000a86:	54d1      	strb	r1, [r2, r3]
				  hold3[len2] = '*';
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <main+0x270>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <main+0x298>)
 8000a8e:	212a      	movs	r1, #42	@ 0x2a
 8000a90:	54d1      	strb	r1, [r2, r3]
				  len2++;
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <main+0x270>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <main+0x270>)
 8000a9a:	6013      	str	r3, [r2, #0]
			  }

			  HAL_UART_Transmit(&huart2, (uint8_t *)hold1, strlen(hold1), 100);
 8000a9c:	4815      	ldr	r0, [pc, #84]	@ (8000af4 <main+0x288>)
 8000a9e:	f7ff fbb1 	bl	8000204 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	2364      	movs	r3, #100	@ 0x64
 8000aa8:	4912      	ldr	r1, [pc, #72]	@ (8000af4 <main+0x288>)
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <main+0x28c>)
 8000aac:	f003 f816 	bl	8003adc <HAL_UART_Transmit>
			  SSD1306_GotoXY (0, 30);
 8000ab0:	211e      	movs	r1, #30
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fb0c 	bl	80010d0 <SSD1306_GotoXY>
			  SSD1306_UpdateScreen();
 8000ab8:	f000 fa64 	bl	8000f84 <SSD1306_UpdateScreen>
			  SSD1306_Puts (hold3, &Font_11x18, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	490a      	ldr	r1, [pc, #40]	@ (8000ae8 <main+0x27c>)
 8000ac0:	4810      	ldr	r0, [pc, #64]	@ (8000b04 <main+0x298>)
 8000ac2:	f000 fb99 	bl	80011f8 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000ac6:	f000 fa5d 	bl	8000f84 <SSD1306_UpdateScreen>
			  HAL_Delay (500);
 8000aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ace:	f000 fe47 	bl	8001760 <HAL_Delay>
 8000ad2:	e6e3      	b.n	800089c <main+0x30>
				  continue;
 8000ad4:	bf00      	nop
	  if (armed == 0) {
 8000ad6:	e6e1      	b.n	800089c <main+0x30>
 8000ad8:	200000d8 	.word	0x200000d8
 8000adc:	200000ec 	.word	0x200000ec
 8000ae0:	200000f0 	.word	0x200000f0
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	080042c4 	.word	0x080042c4
 8000af0:	20000030 	.word	0x20000030
 8000af4:	200000d0 	.word	0x200000d0
 8000af8:	20000088 	.word	0x20000088
 8000afc:	080042d0 	.word	0x080042d0
 8000b00:	200000dc 	.word	0x200000dc
 8000b04:	200000e4 	.word	0x200000e4

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2234      	movs	r2, #52	@ 0x34
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fb9c 	bl	8004254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b2a      	ldr	r3, [pc, #168]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a29      	ldr	r2, [pc, #164]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b54:	4a22      	ldr	r2, [pc, #136]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b70:	2310      	movs	r3, #16
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b86:	2304      	movs	r3, #4
 8000b88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fa10 	bl	8002fbc <HAL_RCC_OscConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ba2:	f000 f925 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2302      	movs	r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fe7e 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bce:	f000 f90f 	bl	8000df0 <Error_Handler>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3750      	adds	r7, #80	@ 0x50
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40007000 	.word	0x40007000

08000be4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_I2C1_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <MX_I2C1_Init+0x58>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c22:	f001 f883 	bl	8001d2c <HAL_I2C_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 f8e0 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000034 	.word	0x20000034
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	00061a80 	.word	0x00061a80

08000c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <MX_USART2_UART_Init+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_USART2_UART_Init+0x4c>)
 8000c78:	f002 fee0 	bl	8003a3c <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c82:	f000 f8b5 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000088 	.word	0x20000088
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	@ 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b43      	ldr	r3, [pc, #268]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a42      	ldr	r2, [pc, #264]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b40      	ldr	r3, [pc, #256]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b3c      	ldr	r3, [pc, #240]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a3b      	ldr	r2, [pc, #236]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b39      	ldr	r3, [pc, #228]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a34      	ldr	r2, [pc, #208]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b32      	ldr	r3, [pc, #200]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a2d      	ldr	r2, [pc, #180]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <MX_GPIO_Init+0x128>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	4828      	ldr	r0, [pc, #160]	@ (8000dc0 <MX_GPIO_Init+0x12c>)
 8000d20:	f000 ffd0 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000d2a:	4826      	ldr	r0, [pc, #152]	@ (8000dc4 <MX_GPIO_Init+0x130>)
 8000d2c:	f000 ffca 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d30:	2320      	movs	r3, #32
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <MX_GPIO_Init+0x12c>)
 8000d48:	f000 fe10 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000d4c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4817      	ldr	r0, [pc, #92]	@ (8000dc4 <MX_GPIO_Init+0x130>)
 8000d66:	f000 fe01 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4812      	ldr	r0, [pc, #72]	@ (8000dc8 <MX_GPIO_Init+0x134>)
 8000d7e:	f000 fdf5 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000d82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <MX_GPIO_Init+0x12c>)
 8000d98:	f000 fde8 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000d9c:	2340      	movs	r3, #64	@ 0x40
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_GPIO_Init+0x130>)
 8000db0:	f000 fddc 	bl	800196c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dde:	f000 fc9f 	bl	8001720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40001000 	.word	0x40001000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e02:	f000 fa27 	bl	8001254 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e06:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2178      	movs	r1, #120	@ 0x78
 8000e0e:	485b      	ldr	r0, [pc, #364]	@ (8000f7c <SSD1306_Init+0x180>)
 8000e10:	f001 f9ce 	bl	80021b0 <HAL_I2C_IsDeviceReady>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e0a9      	b.n	8000f72 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000e1e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000e22:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e24:	e002      	b.n	8000e2c <SSD1306_Init+0x30>
		p--;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e32:	22ae      	movs	r2, #174	@ 0xae
 8000e34:	2100      	movs	r1, #0
 8000e36:	2078      	movs	r0, #120	@ 0x78
 8000e38:	f000 fa88 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2078      	movs	r0, #120	@ 0x78
 8000e42:	f000 fa83 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e46:	2210      	movs	r2, #16
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2078      	movs	r0, #120	@ 0x78
 8000e4c:	f000 fa7e 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e50:	22b0      	movs	r2, #176	@ 0xb0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2078      	movs	r0, #120	@ 0x78
 8000e56:	f000 fa79 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e5a:	22c8      	movs	r2, #200	@ 0xc8
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2078      	movs	r0, #120	@ 0x78
 8000e60:	f000 fa74 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2078      	movs	r0, #120	@ 0x78
 8000e6a:	f000 fa6f 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e6e:	2210      	movs	r2, #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	2078      	movs	r0, #120	@ 0x78
 8000e74:	f000 fa6a 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e78:	2240      	movs	r2, #64	@ 0x40
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2078      	movs	r0, #120	@ 0x78
 8000e7e:	f000 fa65 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e82:	2281      	movs	r2, #129	@ 0x81
 8000e84:	2100      	movs	r1, #0
 8000e86:	2078      	movs	r0, #120	@ 0x78
 8000e88:	f000 fa60 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e8c:	22ff      	movs	r2, #255	@ 0xff
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2078      	movs	r0, #120	@ 0x78
 8000e92:	f000 fa5b 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e96:	22a1      	movs	r2, #161	@ 0xa1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2078      	movs	r0, #120	@ 0x78
 8000e9c:	f000 fa56 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ea0:	22a6      	movs	r2, #166	@ 0xa6
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2078      	movs	r0, #120	@ 0x78
 8000ea6:	f000 fa51 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000eaa:	22a8      	movs	r2, #168	@ 0xa8
 8000eac:	2100      	movs	r1, #0
 8000eae:	2078      	movs	r0, #120	@ 0x78
 8000eb0:	f000 fa4c 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000eb4:	223f      	movs	r2, #63	@ 0x3f
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2078      	movs	r0, #120	@ 0x78
 8000eba:	f000 fa47 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ebe:	22a4      	movs	r2, #164	@ 0xa4
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2078      	movs	r0, #120	@ 0x78
 8000ec4:	f000 fa42 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ec8:	22d3      	movs	r2, #211	@ 0xd3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2078      	movs	r0, #120	@ 0x78
 8000ece:	f000 fa3d 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2078      	movs	r0, #120	@ 0x78
 8000ed8:	f000 fa38 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000edc:	22d5      	movs	r2, #213	@ 0xd5
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2078      	movs	r0, #120	@ 0x78
 8000ee2:	f000 fa33 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ee6:	22f0      	movs	r2, #240	@ 0xf0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2078      	movs	r0, #120	@ 0x78
 8000eec:	f000 fa2e 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ef0:	22d9      	movs	r2, #217	@ 0xd9
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2078      	movs	r0, #120	@ 0x78
 8000ef6:	f000 fa29 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000efa:	2222      	movs	r2, #34	@ 0x22
 8000efc:	2100      	movs	r1, #0
 8000efe:	2078      	movs	r0, #120	@ 0x78
 8000f00:	f000 fa24 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f04:	22da      	movs	r2, #218	@ 0xda
 8000f06:	2100      	movs	r1, #0
 8000f08:	2078      	movs	r0, #120	@ 0x78
 8000f0a:	f000 fa1f 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f0e:	2212      	movs	r2, #18
 8000f10:	2100      	movs	r1, #0
 8000f12:	2078      	movs	r0, #120	@ 0x78
 8000f14:	f000 fa1a 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f18:	22db      	movs	r2, #219	@ 0xdb
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2078      	movs	r0, #120	@ 0x78
 8000f1e:	f000 fa15 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f22:	2220      	movs	r2, #32
 8000f24:	2100      	movs	r1, #0
 8000f26:	2078      	movs	r0, #120	@ 0x78
 8000f28:	f000 fa10 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f2c:	228d      	movs	r2, #141	@ 0x8d
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2078      	movs	r0, #120	@ 0x78
 8000f32:	f000 fa0b 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f36:	2214      	movs	r2, #20
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2078      	movs	r0, #120	@ 0x78
 8000f3c:	f000 fa06 	bl	800134c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f40:	22af      	movs	r2, #175	@ 0xaf
 8000f42:	2100      	movs	r1, #0
 8000f44:	2078      	movs	r0, #120	@ 0x78
 8000f46:	f000 fa01 	bl	800134c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f4a:	222e      	movs	r2, #46	@ 0x2e
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2078      	movs	r0, #120	@ 0x78
 8000f50:	f000 f9fc 	bl	800134c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f843 	bl	8000fe0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000f5a:	f000 f813 	bl	8000f84 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <SSD1306_Init+0x184>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SSD1306_Init+0x184>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SSD1306_Init+0x184>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	200004f4 	.word	0x200004f4

08000f84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e01d      	b.n	8000fcc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	3b50      	subs	r3, #80	@ 0x50
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	@ 0x78
 8000f9c:	f000 f9d6 	bl	800134c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	@ 0x78
 8000fa6:	f000 f9d1 	bl	800134c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000faa:	2210      	movs	r2, #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	@ 0x78
 8000fb0:	f000 f9cc 	bl	800134c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <SSD1306_UpdateScreen+0x58>)
 8000fba:	441a      	add	r2, r3
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	2078      	movs	r0, #120	@ 0x78
 8000fc2:	f000 f95d 	bl	8001280 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d9de      	bls.n	8000f90 <SSD1306_UpdateScreen+0xc>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000f4 	.word	0x200000f4

08000fe0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <SSD1306_Fill+0x14>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e000      	b.n	8000ff6 <SSD1306_Fill+0x16>
 8000ff4:	23ff      	movs	r3, #255	@ 0xff
 8000ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <SSD1306_Fill+0x2c>)
 8000ffe:	f003 f929 	bl	8004254 <memset>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000f4 	.word	0x200000f4

08001010 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	460b      	mov	r3, r1
 800101c:	80bb      	strh	r3, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	70fb      	strb	r3, [r7, #3]
	if (
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	2b7f      	cmp	r3, #127	@ 0x7f
 8001026:	d848      	bhi.n	80010ba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	2b3f      	cmp	r3, #63	@ 0x3f
 800102c:	d845      	bhi.n	80010ba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <SSD1306_DrawPixel+0xb8>)
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d11a      	bne.n	8001080 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b298      	uxth	r0, r3
 8001052:	4603      	mov	r3, r0
 8001054:	01db      	lsls	r3, r3, #7
 8001056:	4413      	add	r3, r2
 8001058:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <SSD1306_DrawPixel+0xbc>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b25a      	sxtb	r2, r3
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b259      	sxtb	r1, r3
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	01db      	lsls	r3, r3, #7
 8001076:	4413      	add	r3, r2
 8001078:	b2c9      	uxtb	r1, r1
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <SSD1306_DrawPixel+0xbc>)
 800107c:	54d1      	strb	r1, [r2, r3]
 800107e:	e01d      	b.n	80010bc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	b298      	uxth	r0, r3
 8001088:	4603      	mov	r3, r0
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	4413      	add	r3, r2
 800108e:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <SSD1306_DrawPixel+0xbc>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b25a      	sxtb	r2, r3
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4013      	ands	r3, r2
 80010a8:	b259      	sxtb	r1, r3
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	4603      	mov	r3, r0
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4413      	add	r3, r2
 80010b2:	b2c9      	uxtb	r1, r1
 80010b4:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <SSD1306_DrawPixel+0xbc>)
 80010b6:	54d1      	strb	r1, [r2, r3]
 80010b8:	e000      	b.n	80010bc <SSD1306_DrawPixel+0xac>
		return;
 80010ba:	bf00      	nop
	}
}
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200004f4 	.word	0x200004f4
 80010cc:	200000f4 	.word	0x200000f4

080010d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	80fb      	strh	r3, [r7, #6]
 80010dc:	4613      	mov	r3, r2
 80010de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <SSD1306_GotoXY+0x28>)
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <SSD1306_GotoXY+0x28>)
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	8053      	strh	r3, [r2, #2]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	200004f4 	.word	0x200004f4

080010fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800110c:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <SSD1306_Putc+0xf8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
	if (
 8001118:	2b7f      	cmp	r3, #127	@ 0x7f
 800111a:	dc07      	bgt.n	800112c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800111c:	4b35      	ldr	r3, [pc, #212]	@ (80011f4 <SSD1306_Putc+0xf8>)
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	461a      	mov	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001128:	2b3f      	cmp	r3, #63	@ 0x3f
 800112a:	dd01      	ble.n	8001130 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800112c:	2300      	movs	r3, #0
 800112e:	e05d      	b.n	80011ec <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e04b      	b.n	80011ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	3b20      	subs	r3, #32
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	7849      	ldrb	r1, [r1, #1]
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	4619      	mov	r1, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	440b      	add	r3, r1
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	e030      	b.n	80011bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d010      	beq.n	800118c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <SSD1306_Putc+0xf8>)
 800116c:	881a      	ldrh	r2, [r3, #0]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b298      	uxth	r0, r3
 8001176:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <SSD1306_Putc+0xf8>)
 8001178:	885a      	ldrh	r2, [r3, #2]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff ff43 	bl	8001010 <SSD1306_DrawPixel>
 800118a:	e014      	b.n	80011b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <SSD1306_Putc+0xf8>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b298      	uxth	r0, r3
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <SSD1306_Putc+0xf8>)
 800119a:	885a      	ldrh	r2, [r3, #2]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b299      	uxth	r1, r3
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	f7ff ff2d 	bl	8001010 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d3c8      	bcc.n	800115a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d3ad      	bcc.n	8001136 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <SSD1306_Putc+0xf8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <SSD1306_Putc+0xf8>)
 80011e8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200004f4 	.word	0x200004f4

080011f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4613      	mov	r3, r2
 8001204:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001206:	e012      	b.n	800122e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff73 	bl	80010fc <SSD1306_Putc>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d002      	beq.n	8001228 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	e008      	b.n	800123a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1e8      	bne.n	8001208 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	781b      	ldrb	r3, [r3, #0]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff feca 	bl	8000fe0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800124c:	f7ff fe9a 	bl	8000f84 <SSD1306_UpdateScreen>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <ssd1306_I2C_Init+0x28>)
 800125c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800125e:	e002      	b.n	8001266 <ssd1306_I2C_Init+0x12>
		p--;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f9      	bne.n	8001260 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	0003d090 	.word	0x0003d090

08001280 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b0c7      	sub	sp, #284	@ 0x11c
 8001284:	af02      	add	r7, sp, #8
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800128e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001292:	600a      	str	r2, [r1, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800129e:	4622      	mov	r2, r4
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012a6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80012aa:	4602      	mov	r2, r0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012b6:	460a      	mov	r2, r1
 80012b8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012c6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012d4:	e015      	b.n	8001302 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012d6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012de:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	441a      	add	r2, r3
 80012e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012ea:	3301      	adds	r3, #1
 80012ec:	7811      	ldrb	r1, [r2, #0]
 80012ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012f2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012f8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012fc:	3301      	adds	r3, #1
 80012fe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001302:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001306:	b29b      	uxth	r3, r3
 8001308:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800130c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001310:	8812      	ldrh	r2, [r2, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d8df      	bhi.n	80012d6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800131a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b299      	uxth	r1, r3
 8001322:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001326:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	f107 020c 	add.w	r2, r7, #12
 8001334:	200a      	movs	r0, #10
 8001336:	9000      	str	r0, [sp, #0]
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <ssd1306_I2C_WriteMulti+0xc8>)
 800133a:	f000 fe3b 	bl	8001fb4 <HAL_I2C_Master_Transmit>
}
 800133e:	bf00      	nop
 8001340:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	20000034 	.word	0x20000034

0800134c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	460b      	mov	r3, r1
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	4613      	mov	r3, r2
 800135c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001362:	797b      	ldrb	r3, [r7, #5]
 8001364:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b299      	uxth	r1, r3
 800136a:	f107 020c 	add.w	r2, r7, #12
 800136e:	230a      	movs	r3, #10
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2302      	movs	r3, #2
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <ssd1306_I2C_Write+0x38>)
 8001376:	f000 fe1d 	bl	8001fb4 <HAL_I2C_Master_Transmit>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000034 	.word	0x20000034

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 fa9b 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_I2C_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12c      	bne.n	8001454 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001416:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	480c      	ldr	r0, [pc, #48]	@ (8001464 <HAL_I2C_MspInit+0x8c>)
 8001434:	f000 fa9a 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_I2C_MspInit+0x88>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_UART_MspInit+0x84>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12b      	bne.n	80014e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a10      	ldr	r2, [pc, #64]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_UART_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c2:	230c      	movs	r3, #12
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d2:	2307      	movs	r3, #7
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_UART_MspInit+0x8c>)
 80014de:	f000 fa45 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40004400 	.word	0x40004400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <HAL_InitTick+0xe4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	4a32      	ldr	r2, [pc, #200]	@ (80015dc <HAL_InitTick+0xe4>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6413      	str	r3, [r2, #64]	@ 0x40
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <HAL_InitTick+0xe4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fae2 	bl	8002af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800153e:	f001 fab3 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8001542:	6378      	str	r0, [r7, #52]	@ 0x34
 8001544:	e004      	b.n	8001550 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001546:	f001 faaf 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 800154a:	4603      	mov	r3, r0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_InitTick+0xe8>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	3b01      	subs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <HAL_InitTick+0xec>)
 8001560:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <HAL_InitTick+0xf0>)
 8001562:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <HAL_InitTick+0xec>)
 8001566:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800156a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_InitTick+0xec>)
 800156e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001570:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_InitTick+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_InitTick+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_InitTick+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001584:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <HAL_InitTick+0xec>)
 8001586:	f001 ffb7 	bl	80034f8 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001594:	2b00      	cmp	r3, #0
 8001596:	d11b      	bne.n	80015d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001598:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <HAL_InitTick+0xec>)
 800159a:	f002 f807 	bl	80035ac <HAL_TIM_Base_Start_IT>
 800159e:	4603      	mov	r3, r0
 80015a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d111      	bne.n	80015d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ac:	2036      	movs	r0, #54	@ 0x36
 80015ae:	f000 f9cf 	bl	8001950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d808      	bhi.n	80015ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	2036      	movs	r0, #54	@ 0x36
 80015be:	f000 f9ab 	bl	8001918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_InitTick+0xf4>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e002      	b.n	80015d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3738      	adds	r7, #56	@ 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	200004fc 	.word	0x200004fc
 80015e8:	40001000 	.word	0x40001000
 80015ec:	2000000c 	.word	0x2000000c

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <UsageFault_Handler+0x4>

08001618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM6_DAC_IRQHandler+0x10>)
 8001656:	f002 f819 	bl	800368c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200004fc 	.word	0x200004fc

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f002 fdd5 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff f8d7 	bl	800086c <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80016cc:	0800505c 	.word	0x0800505c
  ldr r2, =_sbss
 80016d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80016d4:	20000548 	.word	0x20000548

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f8fc 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fef4 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fe3a 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000010 	.word	0x20000010
 8001744:	20000544 	.word	0x20000544

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000544 	.word	0x20000544

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000010 	.word	0x20000010

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff4c 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff61 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff54 	bl	800180c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e165      	b.n	8001c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8154 	bne.w	8001c4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80ae 	beq.w	8001c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a5c      	ldr	r2, [pc, #368]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0e:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <HAL_GPIO_Init+0x304>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	@ (8001c74 <HAL_GPIO_Init+0x308>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <HAL_GPIO_Init+0x30c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x216>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	@ (8001c7c <HAL_GPIO_Init+0x310>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x212>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c80 <HAL_GPIO_Init+0x314>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x20e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_GPIO_Init+0x318>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x20a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c88 <HAL_GPIO_Init+0x31c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x206>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a49      	ldr	r2, [pc, #292]	@ (8001c8c <HAL_GPIO_Init+0x320>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x202>
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	e00c      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e00a      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x21c>
 8001b86:	2300      	movs	r3, #0
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <HAL_GPIO_Init+0x304>)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bca:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf4:	4a26      	ldr	r2, [pc, #152]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c48:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f67f ae96 	bls.w	8001988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021800 	.word	0x40021800
 8001c90:	40013c00 	.word	0x40013c00

08001c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	041a      	lsls	r2, r3, #16
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	400b      	ands	r3, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e12b      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fb40 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d90:	f000 fe8a 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8001d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a81      	ldr	r2, [pc, #516]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d807      	bhi.n	8001db0 <HAL_I2C_Init+0x84>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a80      	ldr	r2, [pc, #512]	@ (8001fa4 <HAL_I2C_Init+0x278>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e006      	b.n	8001dbe <HAL_I2C_Init+0x92>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fa8 <HAL_I2C_Init+0x27c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0e7      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a78      	ldr	r2, [pc, #480]	@ (8001fac <HAL_I2C_Init+0x280>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d802      	bhi.n	8001e00 <HAL_I2C_Init+0xd4>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	e009      	b.n	8001e14 <HAL_I2C_Init+0xe8>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a69      	ldr	r2, [pc, #420]	@ (8001fb0 <HAL_I2C_Init+0x284>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	495c      	ldr	r1, [pc, #368]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d819      	bhi.n	8001e68 <HAL_I2C_Init+0x13c>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e59      	subs	r1, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e48:	400b      	ands	r3, r1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_I2C_Init+0x138>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e59      	subs	r1, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	e051      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e04f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d111      	bne.n	8001e94 <HAL_I2C_Init+0x168>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e012      	b.n	8001eba <HAL_I2C_Init+0x18e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Init+0x196>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e022      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_I2C_Init+0x1bc>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e58      	subs	r0, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	440b      	add	r3, r1
 8001ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee6:	e00f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	6809      	ldr	r1, [r1, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6911      	ldr	r1, [r2, #16]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	000186a0 	.word	0x000186a0
 8001fa4:	001e847f 	.word	0x001e847f
 8001fa8:	003d08ff 	.word	0x003d08ff
 8001fac:	431bde83 	.word	0x431bde83
 8001fb0:	10624dd3 	.word	0x10624dd3

08001fb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fbbe 	bl	8001748 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	f040 80e0 	bne.w	800219c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4970      	ldr	r1, [pc, #448]	@ (80021a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa92 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0d3      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2C_Master_Transmit+0x50>
 8002000:	2302      	movs	r3, #2
 8002002:	e0cc      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d007      	beq.n	800202a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	@ 0x21
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2210      	movs	r2, #16
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a50      	ldr	r2, [pc, #320]	@ (80021ac <HAL_I2C_Master_Transmit+0x1f8>)
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f9ca 	bl	800240c <I2C_MasterRequestWrite>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e08d      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002098:	e066      	b.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6a39      	ldr	r1, [r7, #32]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fb50 	bl	8002744 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_I2C_Master_Transmit+0x188>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d017      	beq.n	800213c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	6a39      	ldr	r1, [r7, #32]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fb47 	bl	80027d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d194      	bne.n	800209a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00100002 	.word	0x00100002
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fac2 	bl	8001748 <HAL_GetTick>
 80021c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	f040 8111 	bne.w	80023fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2319      	movs	r3, #25
 80021de:	2201      	movs	r2, #1
 80021e0:	4988      	ldr	r1, [pc, #544]	@ (8002404 <HAL_I2C_IsDeviceReady+0x254>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f994 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
 80021f0:	e104      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2C_IsDeviceReady+0x50>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e0fd      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d007      	beq.n	8002226 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2224      	movs	r2, #36	@ 0x24
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a70      	ldr	r2, [pc, #448]	@ (8002408 <HAL_I2C_IsDeviceReady+0x258>)
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002258:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f952 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002280:	d103      	bne.n	800228a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0b6      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800229c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800229e:	f7ff fa53 	bl	8001748 <HAL_GetTick>
 80022a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022d2:	e025      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7ff fa38 	bl	8001748 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <HAL_I2C_IsDeviceReady+0x13a>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22a0      	movs	r2, #160	@ 0xa0
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2ba0      	cmp	r3, #160	@ 0xa0
 800232a:	d005      	beq.n	8002338 <HAL_I2C_IsDeviceReady+0x188>
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_I2C_IsDeviceReady+0x188>
 8002332:	7dbb      	ldrb	r3, [r7, #22]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0cd      	beq.n	80022d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d129      	bne.n	80023a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2319      	movs	r3, #25
 800237a:	2201      	movs	r2, #1
 800237c:	4921      	ldr	r1, [pc, #132]	@ (8002404 <HAL_I2C_IsDeviceReady+0x254>)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8c6 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e036      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e02c      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	490f      	ldr	r1, [pc, #60]	@ (8002404 <HAL_I2C_IsDeviceReady+0x254>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f8a2 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e012      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3301      	adds	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f4ff af32 	bcc.w	800224a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	00100002 	.word	0x00100002
 8002408:	ffff0000 	.word	0xffff0000

0800240c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d006      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d003      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002434:	d108      	bne.n	8002448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e00b      	b.n	8002460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b12      	cmp	r3, #18
 800244e:	d107      	bne.n	8002460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800245e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f84f 	bl	8002510 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002486:	d103      	bne.n	8002490 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e035      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800249c:	d108      	bne.n	80024b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	e01b      	b.n	80024e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b0:	897b      	ldrh	r3, [r7, #10]
 80024b2:	11db      	asrs	r3, r3, #7
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 0306 	and.w	r3, r3, #6
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f063 030f 	orn	r3, r3, #15
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <I2C_MasterRequestWrite+0xfc>)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f898 	bl	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e010      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4907      	ldr	r1, [pc, #28]	@ (800250c <I2C_MasterRequestWrite+0x100>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f888 	bl	8002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010008 	.word	0x00010008
 800250c:	00010002 	.word	0x00010002

08002510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002520:	e048      	b.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d044      	beq.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7ff f90d 	bl	8001748 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d139      	bne.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d10d      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x56>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	43da      	mvns	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	e00c      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d116      	bne.n	80025b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e023      	b.n	80025fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10d      	bne.n	80025da <I2C_WaitOnFlagUntilTimeout+0xca>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	43da      	mvns	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	e00c      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d093      	beq.n	8002522 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002612:	e071      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002622:	d123      	bne.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002632:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800263c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e067      	b.n	800273c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d041      	beq.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7ff f868 	bl	8001748 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d136      	bne.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10c      	bne.n	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e00b      	b.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e021      	b.n	800273c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10c      	bne.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e00b      	b.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f af6d 	bne.w	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002750:	e034      	b.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f886 	bl	8002864 <I2C_IsAcknowledgeFailed>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e034      	b.n	80027cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d028      	beq.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7fe ffed 	bl	8001748 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	2b80      	cmp	r3, #128	@ 0x80
 800278c:	d016      	beq.n	80027bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b80      	cmp	r3, #128	@ 0x80
 80027c8:	d1c3      	bne.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e0:	e034      	b.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f83e 	bl	8002864 <I2C_IsAcknowledgeFailed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e034      	b.n	800285c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d028      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7fe ffa5 	bl	8001748 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11d      	bne.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d016      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e007      	b.n	800285c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d1c3      	bne.n	80027e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287a:	d11b      	bne.n	80028b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fec8 	bl	8001748 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fec4 	bl	8001748 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f887 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd44 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08005034 	.word	0x08005034
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	2000000c 	.word	0x2000000c

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aac:	f7ff fff0 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	@ (8002acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08005044 	.word	0x08005044

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad4:	f7ff ffdc 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08005044 	.word	0x08005044

08002af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	220f      	movs	r2, #15
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0203 	and.w	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_RCC_GetClockConfig+0x60>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b0ae      	sub	sp, #184	@ 0xb8
 8002b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b82:	4bcb      	ldr	r3, [pc, #812]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	f200 8206 	bhi.w	8002f9c <HAL_RCC_GetSysClockFreq+0x440>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002f9d 	.word	0x08002f9d
 8002ba0:	08002f9d 	.word	0x08002f9d
 8002ba4:	08002f9d 	.word	0x08002f9d
 8002ba8:	08002bd5 	.word	0x08002bd5
 8002bac:	08002f9d 	.word	0x08002f9d
 8002bb0:	08002f9d 	.word	0x08002f9d
 8002bb4:	08002f9d 	.word	0x08002f9d
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002f9d 	.word	0x08002f9d
 8002bc0:	08002f9d 	.word	0x08002f9d
 8002bc4:	08002f9d 	.word	0x08002f9d
 8002bc8:	08002dcd 	.word	0x08002dcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002bd2:	e1e7      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd4:	4bb8      	ldr	r3, [pc, #736]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bda:	e1e3      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be8:	4bb1      	ldr	r3, [pc, #708]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d071      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf4:	4bae      	ldr	r3, [pc, #696]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4641      	mov	r1, r8
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	1a51      	subs	r1, r2, r1
 8002c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c60:	4649      	mov	r1, r9
 8002c62:	eb63 0301 	sbc.w	r3, r3, r1
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c74:	4649      	mov	r1, r9
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4641      	mov	r1, r8
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4641      	mov	r1, r8
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4622      	mov	r2, r4
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8e:	462b      	mov	r3, r5
 8002c90:	460a      	mov	r2, r1
 8002c92:	eb42 0303 	adc.w	r3, r2, r3
 8002c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	024b      	lsls	r3, r1, #9
 8002ca8:	4621      	mov	r1, r4
 8002caa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cae:	4621      	mov	r1, r4
 8002cb0:	024a      	lsls	r2, r1, #9
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cc8:	f7fd faa4 	bl	8000214 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd6:	e067      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b75      	ldr	r3, [pc, #468]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cf6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	f04f 0000 	mov.w	r0, #0
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	0159      	lsls	r1, r3, #5
 8002d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0c:	0150      	lsls	r0, r2, #5
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4621      	mov	r1, r4
 8002d14:	1a51      	subs	r1, r2, r1
 8002d16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d18:	4629      	mov	r1, r5
 8002d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	018b      	lsls	r3, r1, #6
 8002d30:	4641      	mov	r1, r8
 8002d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d36:	4641      	mov	r1, r8
 8002d38:	018a      	lsls	r2, r1, #6
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d40:	4649      	mov	r1, r9
 8002d42:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5a:	4692      	mov	sl, r2
 8002d5c:	469b      	mov	fp, r3
 8002d5e:	4623      	mov	r3, r4
 8002d60:	eb1a 0303 	adds.w	r3, sl, r3
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	462b      	mov	r3, r5
 8002d68:	eb4b 0303 	adc.w	r3, fp, r3
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	028b      	lsls	r3, r1, #10
 8002d7e:	4621      	mov	r1, r4
 8002d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d84:	4621      	mov	r1, r4
 8002d86:	028a      	lsls	r2, r1, #10
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d90:	2200      	movs	r2, #0
 8002d92:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d94:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d9a:	f7fd fa3b 	bl	8000214 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4613      	mov	r3, r2
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da8:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dca:	e0eb      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dcc:	4b38      	ldr	r3, [pc, #224]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd8:	4b35      	ldr	r3, [pc, #212]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d06b      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de4:	4b32      	ldr	r3, [pc, #200]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	2200      	movs	r2, #0
 8002dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002df8:	2300      	movs	r3, #0
 8002dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e00:	4622      	mov	r2, r4
 8002e02:	462b      	mov	r3, r5
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	0159      	lsls	r1, r3, #5
 8002e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e12:	0150      	lsls	r0, r2, #5
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4621      	mov	r1, r4
 8002e1a:	1a51      	subs	r1, r2, r1
 8002e1c:	61b9      	str	r1, [r7, #24]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	eb63 0301 	sbc.w	r3, r3, r1
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e32:	4659      	mov	r1, fp
 8002e34:	018b      	lsls	r3, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3c:	4651      	mov	r1, sl
 8002e3e:	018a      	lsls	r2, r1, #6
 8002e40:	4651      	mov	r1, sl
 8002e42:	ebb2 0801 	subs.w	r8, r2, r1
 8002e46:	4659      	mov	r1, fp
 8002e48:	eb63 0901 	sbc.w	r9, r3, r1
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e60:	4690      	mov	r8, r2
 8002e62:	4699      	mov	r9, r3
 8002e64:	4623      	mov	r3, r4
 8002e66:	eb18 0303 	adds.w	r3, r8, r3
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	eb49 0303 	adc.w	r3, r9, r3
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e80:	4629      	mov	r1, r5
 8002e82:	024b      	lsls	r3, r1, #9
 8002e84:	4621      	mov	r1, r4
 8002e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	024a      	lsls	r2, r1, #9
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e96:	2200      	movs	r2, #0
 8002e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ea0:	f7fd f9b8 	bl	8000214 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eae:	e065      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x420>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ece:	2300      	movs	r3, #0
 8002ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	464b      	mov	r3, r9
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4641      	mov	r1, r8
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4651      	mov	r1, sl
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4651      	mov	r1, sl
 8002f18:	1a54      	subs	r4, r2, r1
 8002f1a:	4659      	mov	r1, fp
 8002f1c:	eb63 0501 	sbc.w	r5, r3, r1
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00eb      	lsls	r3, r5, #3
 8002f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2e:	00e2      	lsls	r2, r4, #3
 8002f30:	4614      	mov	r4, r2
 8002f32:	461d      	mov	r5, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	18e3      	adds	r3, r4, r3
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	eb45 0303 	adc.w	r3, r5, r3
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	028b      	lsls	r3, r1, #10
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f58:	4621      	mov	r1, r4
 8002f5a:	028a      	lsls	r2, r1, #10
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f64:	2200      	movs	r2, #0
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f6e:	f7fd f951 	bl	8000214 <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4613      	mov	r3, r2
 8002f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0f1b      	lsrs	r3, r3, #28
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f9a:	e003      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	37b8      	adds	r7, #184	@ 0xb8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400

08002fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e28d      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8083 	beq.w	80030e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fdc:	4b94      	ldr	r3, [pc, #592]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d019      	beq.n	800301c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fe8:	4b91      	ldr	r3, [pc, #580]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003000:	d00c      	beq.n	800301c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003002:	4b8b      	ldr	r3, [pc, #556]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d112      	bne.n	8003034 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301a:	d10b      	bne.n	8003034 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x124>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d157      	bne.n	80030e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e25a      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x90>
 800303e:	4b7c      	ldr	r3, [pc, #496]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7b      	ldr	r2, [pc, #492]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e01d      	b.n	8003088 <HAL_RCC_OscConfig+0xcc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0xb4>
 8003056:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a75      	ldr	r2, [pc, #468]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b73      	ldr	r3, [pc, #460]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a72      	ldr	r2, [pc, #456]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0xcc>
 8003070:	4b6f      	ldr	r3, [pc, #444]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6e      	ldr	r2, [pc, #440]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b6c      	ldr	r3, [pc, #432]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6b      	ldr	r2, [pc, #428]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fb5a 	bl	8001748 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe fb56 	bl	8001748 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	@ 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e21f      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4b61      	ldr	r3, [pc, #388]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0xdc>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fb46 	bl	8001748 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe fb42 	bl	8001748 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e20b      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	4b57      	ldr	r3, [pc, #348]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x104>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06f      	beq.n	80031ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030ee:	4b50      	ldr	r3, [pc, #320]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d017      	beq.n	800312a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003106:	4b4a      	ldr	r3, [pc, #296]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x186>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1d3      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4937      	ldr	r1, [pc, #220]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x278>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe faef 	bl	8001748 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316e:	f7fe faeb 	bl	8001748 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1b4      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4925      	ldr	r1, [pc, #148]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_OscConfig+0x278>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe face 	bl	8001748 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe faca 	bl	8001748 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e193      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d036      	beq.n	8003248 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe faae 	bl	8001748 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe faaa 	bl	8001748 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e173      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_RCC_OscConfig+0x274>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x234>
 800320e:	e01b      	b.n	8003248 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe fa97 	bl	8001748 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e00e      	b.n	800323c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7fe fa93 	bl	8001748 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d907      	bls.n	800323c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e15c      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b8a      	ldr	r3, [pc, #552]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ea      	bne.n	800321e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8097 	beq.w	8003384 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b83      	ldr	r3, [pc, #524]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b7f      	ldr	r3, [pc, #508]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a7e      	ldr	r2, [pc, #504]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b7c      	ldr	r3, [pc, #496]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b79      	ldr	r3, [pc, #484]	@ (800346c <HAL_RCC_OscConfig+0x4b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003292:	4b76      	ldr	r3, [pc, #472]	@ (800346c <HAL_RCC_OscConfig+0x4b0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a75      	ldr	r2, [pc, #468]	@ (800346c <HAL_RCC_OscConfig+0x4b0>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7fe fa53 	bl	8001748 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fe fa4f 	bl	8001748 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e118      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCC_OscConfig+0x4b0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x31e>
 80032cc:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x358>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x340>
 80032e2:	4b61      	ldr	r3, [pc, #388]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	4a60      	ldr	r2, [pc, #384]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0x358>
 80032fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	4a59      	ldr	r2, [pc, #356]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	@ 0x70
 8003308:	4b57      	ldr	r3, [pc, #348]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	4a56      	ldr	r2, [pc, #344]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe fa14 	bl	8001748 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe fa10 	bl	8001748 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0d7      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCC_OscConfig+0x368>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe f9fe 	bl	8001748 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe f9fa 	bl	8001748 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0c1      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	4b40      	ldr	r3, [pc, #256]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ee      	bne.n	8003350 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	4a3a      	ldr	r2, [pc, #232]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 800337e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80ad 	beq.w	80034e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d060      	beq.n	800345c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d145      	bne.n	800342e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b33      	ldr	r3, [pc, #204]	@ (8003470 <HAL_RCC_OscConfig+0x4b4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f9ce 	bl	8001748 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe f9ca 	bl	8001748 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e093      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b29      	ldr	r3, [pc, #164]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	071b      	lsls	r3, r3, #28
 80033fa:	491b      	ldr	r1, [pc, #108]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_RCC_OscConfig+0x4b4>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe f99f 	bl	8001748 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe f99b 	bl	8001748 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e064      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x452>
 800342c:	e05c      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_RCC_OscConfig+0x4b4>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe f988 	bl	8001748 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe f984 	bl	8001748 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04d      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x480>
 800345a:	e045      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e040      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000
 8003470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003474:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <HAL_RCC_OscConfig+0x538>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d030      	beq.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d129      	bne.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d122      	bne.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d119      	bne.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	3b01      	subs	r3, #1
 80034be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d10f      	bne.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f839 	bl	8003596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 f9c0 	bl	80038bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e04e      	b.n	8003662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_TIM_Base_Start_IT+0xc4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d022      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ee:	d01d      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <HAL_TIM_Base_Start_IT+0xc8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d018      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003678 <HAL_TIM_Base_Start_IT+0xcc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1c      	ldr	r2, [pc, #112]	@ (800367c <HAL_TIM_Base_Start_IT+0xd0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <HAL_TIM_Base_Start_IT+0xd4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	@ (8003684 <HAL_TIM_Base_Start_IT+0xd8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIM_Base_Start_IT+0xdc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b06      	cmp	r3, #6
 800363c:	d010      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	e007      	b.n	8003660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d020      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01b      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8d2 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8c4 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8d5 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d020      	beq.n	800373c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0204 	mvn.w	r2, #4
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8ac 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f89e 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8af 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0208 	mvn.w	r2, #8
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2204      	movs	r2, #4
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f886 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f878 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f889 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d020      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0210 	mvn.w	r2, #16
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2208      	movs	r2, #8
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f860 	bl	8003880 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f852 	bl	800386c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f863 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00c      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0201 	mvn.w	r2, #1
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd faea 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f906 	bl	8003a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f834 	bl	80038a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8d8 	bl	8003a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a46      	ldr	r2, [pc, #280]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a43      	ldr	r2, [pc, #268]	@ (80039ec <TIM_Base_SetConfig+0x130>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a42      	ldr	r2, [pc, #264]	@ (80039f0 <TIM_Base_SetConfig+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a41      	ldr	r2, [pc, #260]	@ (80039f4 <TIM_Base_SetConfig+0x138>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a40      	ldr	r2, [pc, #256]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d027      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a32      	ldr	r2, [pc, #200]	@ (80039ec <TIM_Base_SetConfig+0x130>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d023      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a31      	ldr	r2, [pc, #196]	@ (80039f0 <TIM_Base_SetConfig+0x134>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a30      	ldr	r2, [pc, #192]	@ (80039f4 <TIM_Base_SetConfig+0x138>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2f      	ldr	r2, [pc, #188]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2e      	ldr	r2, [pc, #184]	@ (80039fc <TIM_Base_SetConfig+0x140>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2d      	ldr	r2, [pc, #180]	@ (8003a00 <TIM_Base_SetConfig+0x144>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2c      	ldr	r2, [pc, #176]	@ (8003a04 <TIM_Base_SetConfig+0x148>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2b      	ldr	r2, [pc, #172]	@ (8003a08 <TIM_Base_SetConfig+0x14c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2a      	ldr	r2, [pc, #168]	@ (8003a0c <TIM_Base_SetConfig+0x150>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a29      	ldr	r2, [pc, #164]	@ (8003a10 <TIM_Base_SetConfig+0x154>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a10      	ldr	r2, [pc, #64]	@ (80039e8 <TIM_Base_SetConfig+0x12c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0xf8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a12      	ldr	r2, [pc, #72]	@ (80039f8 <TIM_Base_SetConfig+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]
  }
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40010400 	.word	0x40010400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800
 8003a08:	40001800 	.word	0x40001800
 8003a0c:	40001c00 	.word	0x40001c00
 8003a10:	40002000 	.word	0x40002000

08003a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e042      	b.n	8003ad4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd fd00 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f973 	bl	8003d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d175      	bne.n	8003be8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Transmit+0x2c>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e06e      	b.n	8003bea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	@ 0x21
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1a:	f7fd fe15 	bl	8001748 <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b50:	e02e      	b.n	8003bb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f848 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e03a      	b.n	8003bea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e007      	b.n	8003ba2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1cb      	bne.n	8003b52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2140      	movs	r1, #64	@ 0x40
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f814 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e006      	b.n	8003bea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	e03b      	b.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d037      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fd fd9c 	bl	8001748 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	6a3a      	ldr	r2, [r7, #32]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e03a      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d020      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	d01d      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d116      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f81d 	bl	8003ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e00f      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d0b4      	beq.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b095      	sub	sp, #84	@ 0x54
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ccc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e5      	bne.n	8003cac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d119      	bne.n	8003d50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d3c:	61ba      	str	r2, [r7, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6979      	ldr	r1, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d5e:	bf00      	nop
 8003d60:	3754      	adds	r7, #84	@ 0x54
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b0c0      	sub	sp, #256	@ 0x100
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	68d9      	ldr	r1, [r3, #12]
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	ea40 0301 	orr.w	r3, r0, r1
 8003d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dc4:	f021 010c 	bic.w	r1, r1, #12
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	6999      	ldr	r1, [r3, #24]
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	ea40 0301 	orr.w	r3, r0, r1
 8003df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <UART_SetConfig+0x2cc>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d005      	beq.n	8003e0c <UART_SetConfig+0xa0>
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b8d      	ldr	r3, [pc, #564]	@ (800403c <UART_SetConfig+0x2d0>)
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d104      	bne.n	8003e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fe60 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 8003e10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e14:	e003      	b.n	8003e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e16:	f7fe fe47 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e28:	f040 810c 	bne.w	8004044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e3e:	4622      	mov	r2, r4
 8003e40:	462b      	mov	r3, r5
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e46:	415b      	adcs	r3, r3
 8003e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e4e:	4621      	mov	r1, r4
 8003e50:	eb12 0801 	adds.w	r8, r2, r1
 8003e54:	4629      	mov	r1, r5
 8003e56:	eb43 0901 	adc.w	r9, r3, r1
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e6e:	4690      	mov	r8, r2
 8003e70:	4699      	mov	r9, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	eb18 0303 	adds.w	r3, r8, r3
 8003e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	eb49 0303 	adc.w	r3, r9, r3
 8003e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	18db      	adds	r3, r3, r3
 8003e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	eb42 0303 	adc.w	r3, r2, r3
 8003ea6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003eb0:	f7fc f9b0 	bl	8000214 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4b61      	ldr	r3, [pc, #388]	@ (8004040 <UART_SetConfig+0x2d4>)
 8003eba:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	011c      	lsls	r4, r3, #4
 8003ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	1891      	adds	r1, r2, r2
 8003eda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003edc:	415b      	adcs	r3, r3
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eea:	4649      	mov	r1, r9
 8003eec:	eb43 0b01 	adc.w	fp, r3, r1
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f04:	4692      	mov	sl, r2
 8003f06:	469b      	mov	fp, r3
 8003f08:	4643      	mov	r3, r8
 8003f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f12:	464b      	mov	r3, r9
 8003f14:	eb4b 0303 	adc.w	r3, fp, r3
 8003f18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f30:	460b      	mov	r3, r1
 8003f32:	18db      	adds	r3, r3, r3
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f36:	4613      	mov	r3, r2
 8003f38:	eb42 0303 	adc.w	r3, r2, r3
 8003f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f46:	f7fc f965 	bl	8000214 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <UART_SetConfig+0x2d4>)
 8003f52:	fba3 2301 	umull	r2, r3, r3, r1
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2264      	movs	r2, #100	@ 0x64
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	1acb      	subs	r3, r1, r3
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f66:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <UART_SetConfig+0x2d4>)
 8003f68:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f74:	441c      	add	r4, r3
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f90:	415b      	adcs	r3, r3
 8003f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fcc:	464b      	mov	r3, r9
 8003fce:	460a      	mov	r2, r1
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fec:	460b      	mov	r3, r1
 8003fee:	18db      	adds	r3, r3, r3
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	eb42 0303 	adc.w	r3, r2, r3
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004002:	f7fc f907 	bl	8000214 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <UART_SetConfig+0x2d4>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	@ 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	3332      	adds	r3, #50	@ 0x32
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <UART_SetConfig+0x2d4>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 0207 	and.w	r2, r3, #7
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4422      	add	r2, r4
 8004032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004034:	e106      	b.n	8004244 <UART_SetConfig+0x4d8>
 8004036:	bf00      	nop
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800404e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004056:	4642      	mov	r2, r8
 8004058:	464b      	mov	r3, r9
 800405a:	1891      	adds	r1, r2, r2
 800405c:	6239      	str	r1, [r7, #32]
 800405e:	415b      	adcs	r3, r3
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
 8004062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004066:	4641      	mov	r1, r8
 8004068:	1854      	adds	r4, r2, r1
 800406a:	4649      	mov	r1, r9
 800406c:	eb43 0501 	adc.w	r5, r3, r1
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	00eb      	lsls	r3, r5, #3
 800407a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407e:	00e2      	lsls	r2, r4, #3
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	4643      	mov	r3, r8
 8004086:	18e3      	adds	r3, r4, r3
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800408c:	464b      	mov	r3, r9
 800408e:	eb45 0303 	adc.w	r3, r5, r3
 8004092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040b2:	4629      	mov	r1, r5
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	4621      	mov	r1, r4
 80040b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040bc:	4621      	mov	r1, r4
 80040be:	008a      	lsls	r2, r1, #2
 80040c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040c4:	f7fc f8a6 	bl	8000214 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b60      	ldr	r3, [pc, #384]	@ (8004250 <UART_SetConfig+0x4e4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	011c      	lsls	r4, r3, #4
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	61b9      	str	r1, [r7, #24]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	4641      	mov	r1, r8
 80040fa:	1851      	adds	r1, r2, r1
 80040fc:	6139      	str	r1, [r7, #16]
 80040fe:	4649      	mov	r1, r9
 8004100:	414b      	adcs	r3, r1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004110:	4659      	mov	r1, fp
 8004112:	00cb      	lsls	r3, r1, #3
 8004114:	4651      	mov	r1, sl
 8004116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411a:	4651      	mov	r1, sl
 800411c:	00ca      	lsls	r2, r1, #3
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	4603      	mov	r3, r0
 8004124:	4642      	mov	r2, r8
 8004126:	189b      	adds	r3, r3, r2
 8004128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800412c:	464b      	mov	r3, r9
 800412e:	460a      	mov	r2, r1
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004142:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004150:	4649      	mov	r1, r9
 8004152:	008b      	lsls	r3, r1, #2
 8004154:	4641      	mov	r1, r8
 8004156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415a:	4641      	mov	r1, r8
 800415c:	008a      	lsls	r2, r1, #2
 800415e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004162:	f7fc f857 	bl	8000214 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4611      	mov	r1, r2
 800416c:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <UART_SetConfig+0x4e4>)
 800416e:	fba3 2301 	umull	r2, r3, r3, r1
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2264      	movs	r2, #100	@ 0x64
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	1acb      	subs	r3, r1, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	@ 0x32
 8004180:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <UART_SetConfig+0x4e4>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
 8004196:	677a      	str	r2, [r7, #116]	@ 0x74
 8004198:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	415b      	adcs	r3, r3
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6039      	str	r1, [r7, #0]
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041de:	464b      	mov	r3, r9
 80041e0:	460a      	mov	r2, r1
 80041e2:	eb42 0303 	adc.w	r3, r2, r3
 80041e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004200:	4649      	mov	r1, r9
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420a:	4641      	mov	r1, r8
 800420c:	008a      	lsls	r2, r1, #2
 800420e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004212:	f7fb ffff 	bl	8000214 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <UART_SetConfig+0x4e4>)
 800421c:	fba3 1302 	umull	r1, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	2164      	movs	r1, #100	@ 0x64
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	3332      	adds	r3, #50	@ 0x32
 800422e:	4a08      	ldr	r2, [pc, #32]	@ (8004250 <UART_SetConfig+0x4e4>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4422      	add	r2, r4
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800424a:	46bd      	mov	sp, r7
 800424c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004250:	51eb851f 	.word	0x51eb851f

08004254 <memset>:
 8004254:	4402      	add	r2, r0
 8004256:	4603      	mov	r3, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	@ (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	@ (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	@ (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	@ (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 f818 	bl	80042ac <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08005054 	.word	0x08005054
 80042a0:	08005054 	.word	0x08005054
 80042a4:	08005054 	.word	0x08005054
 80042a8:	08005058 	.word	0x08005058

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
